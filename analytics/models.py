# -*- coding: utf-8 -*-
#This contains models to map their corresponding tables of the database
#The models for OpenStreetMap network data which are mounted in the database were generated by Django "inspectdb" command
#inspectdb create models by introspecting an existing database.

from __future__ import unicode_literals

from django.contrib.gis.db import models
from django.contrib.auth.models import User

from django.contrib.postgres.fields import JSONField

#zipgpx table
class ZIPGPX(models.Model):
    user = models.ForeignKey(User, default=1)
    filename = models.FileField()

#gpxfile table
class GPXFile(models.Model):
    user = models.ForeignKey(User, default=1)
    filename = models.FileField()
    segments = models.TextField(null=True)

#gpxpoint table
class GPXPoint(models.Model):
    user = models.ForeignKey(User, default=1)
    gpxfile = models.ForeignKey(GPXFile, default=1)
    point = models.PointField(srid=4326)
    timestamp = models.DateTimeField()
    objects = models.GeoManager()

    def __unicode__(self):
        return unicode(self.gpxfile)

#segmentgeojson table
class SegmentGeoJSON(models.Model):
    user = models.ForeignKey(User, default=1)
    gpxfile = models.ForeignKey(GPXFile, default=1)
    geojson = JSONField()

#segmentcounts table
class SegmentCounts(models.Model):
    user = models.ForeignKey(User, default=1)
    segment_id = models.IntegerField()
    segment_counts = models.IntegerField()

#route table
class Route(models.Model):
    user = models.ForeignKey(User, default=1)
    route_id = models.IntegerField()
    route_counts = models.IntegerField()
    route_color = models.TextField()
    route_tt = models.IntegerField()

#matchingpoint table
class MatchingPoint(models.Model):
    user = models.ForeignKey(User, default=1)
    gpxfile = models.ForeignKey(GPXFile, default=1)
    point = models.PointField(srid=4326)
    objects = models.GeoManager()

# The followings are models for OpenStreetMap network data table
class OsmWayTypes(models.Model):
    type_id = models.IntegerField(primary_key=True)
    name = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'osm_way_types'

class OsmWayClasses(models.Model):
    class_id = models.IntegerField(primary_key=True)
    type = models.ForeignKey(OsmWayTypes, models.DO_NOTHING, blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    priority = models.FloatField(blank=True, null=True)
    default_maxspeed = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'osm_way_classes'

class Ways(models.Model):
    gid = models.BigAutoField(primary_key=True)
    class_field = models.ForeignKey(OsmWayClasses, models.DO_NOTHING, db_column='class_id')
    # Field renamed because it was a Python reserved word.
    length = models.FloatField(blank=True, null=True)
    length_m = models.FloatField(blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    x1 = models.FloatField(blank=True, null=True)
    y1 = models.FloatField(blank=True, null=True)
    x2 = models.FloatField(blank=True, null=True)
    y2 = models.FloatField(blank=True, null=True)
    osm_id = models.BigIntegerField(blank=True, null=True)
    source_osm = models.BigIntegerField(blank=True, null=True)
    target_osm = models.BigIntegerField(blank=True, null=True)
    priority = models.FloatField(blank=True, null=True)
    the_geom = models.LineStringField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ways'

